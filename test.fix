module Test;

import Random;

test : IO ();
test = (
    let init = [/* 0x12345 = */ 74565_U64, /* 0x23456 = */ 144470_U64, /* 0x34567 = */ 214375_U64, /* 0x45678 = */ 284280_U64];
    let random = init_by_array(init);

    // Here, we only test unifomness of the random numbers.
    let n = 100000;
    let m = 10;
    let ave = (n / m).to_F64;
    let error = 0.05;

    // Check if the distriution array is unifom under error rate `error`.
    let is_dist_uniform = |dist: Array I64| (
        dist.to_iter.fold(true, |cnt, ok|
            let cnt = cnt.to_F64;
            ok && (cnt >= (ave - ave * error) && cnt <= (ave + ave * error))
        )
    );

    // Test `generate_U64`.
    let dist = Array::fill(m, 0);
    let (random, dist) = Iterator::range(0, n).fold((random, dist), |_, (random, dist)| (
        let (random, x) = generate_U64(random);
        let i = (x % m.to_U64).to_I64;
        let dist = dist.mod(i, Add::add(1));
        (random, dist)
    ));
    assert(|_|"generate_U64 is not uniform!", is_dist_uniform(dist));;

    // Test `generate_F64_2`.
    let dist = Array::fill(m, 0);
    let (random, dist) = Iterator::range(0, n).fold((random, dist), |_, (random, dist)| (
        let (random, x) = generate_F64_2(random);
        let i = (x * m.to_F64).to_I64;
        let dist = dist.mod(i, Add::add(1));
        (random, dist)
    ));
    assert(|_|"generate_F64_2 is not uniform!", is_dist_uniform(dist));;

    pure()
);